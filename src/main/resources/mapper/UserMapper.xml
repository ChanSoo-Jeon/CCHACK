<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="kopo.poly.mapper.IUserMapper">

    <resultMap id="UserMap" type="kopo.poly.dto.UserDTO">
        <id     property="user_id"  column="user_id"/>
        <result property="user_pwd" column="user_pwd"/>
        <result property="user_nick_name" column="user_nick_name"/>
        <result property="commute_by_car" column="commute_by_car"/>
        <result property="cafe_use_freq" column="cafe_use_freq"/>
        <result property="grocery_freq" column="grocery_freq"/>
        <result property="practice_energy_saving" column="practice_energy_saving"/>
        <result property="residence_dong" column="residence_dong"/>
        <result property="workplace_or_school_dong" column="workplace_or_school_dong"/>
        <result property="point" column="point"/>
    </resultMap>


    <!-- 회원가입을 위한 중복 아이디 확인-->
    <select id="checkId" parameterType="UserDTO" resultType="int">
        SELECT count(*)
        FROM users
        WHERE user_id = #{user_id}
    </select>

    <!-- 회원가입 정보 넣기 -->
    <insert id="signUpProc" parameterType="UserDTO">
        INSERT INTO users
        (
            user_id, user_pwd, user_nick_name, commute_by_car, cafe_use_freq,
            grocery_freq, practice_energy_saving, residence_dong, workplace_or_school_dong
        )
        VALUES(
                  #{user_id}, #{user_pwd}, #{user_nick_name}, #{commute_by_car}, #{cafe_use_freq},
                  #{grocery_freq}, #{practice_energy_saving}, #{residence_dong}, #{workplace_or_school_dong}
              )
    </insert>

    <select id="loginProc" parameterType="UserDTO" resultMap="UserMap">
        SELECT *
        FROM users
        WHERE user_id = #{user_id} AND user_pwd = #{user_pwd}
    </select>

    <select id="getUserInfo" parameterType="String" resultMap="UserMap">
        SELECT *
        FROM users
        WHERE user_id = #{user_id}
    </select>



	<!-- 게시판 리스트 쿼리 -->
	<select id="getNoticeList" resultType="NoticeDTO">
		SELECT N.NOTICE_SEQ, N.TITLE, N.NOTICE_YN, N.READ_CNT, U.USER_NAME, N.USER_ID,
			   TO_CHAR(N.REG_DT, 'YYYY-MM-DD') AS REG_DT
	      FROM NOTICE N, USER_INFO U
	     WHERE N.USER_ID = U.USER_ID
	 	 ORDER BY N.NOTICE_YN, N.REG_DT DESC
	</select>
	
	<!-- 게시판 등록 쿼리 -->
	<insert id="insertNoticeInfo" parameterType="NoticeDTO">
		INSERT INTO NOTICE
			(
				NOTICE_SEQ, TITLE, NOTICE_YN, CONTENTS, USER_ID, READ_CNT, 
		      	REG_ID, REG_DT, CHG_ID, CHG_DT
			)
		VALUES(
			(SELECT NULLIF(MAX(A.NOTICE_SEQ),0)+1 FROM NOTICE A),
			#{title}, #{noticeYn}, #{contents}, #{userId}, 0, #{userId}, SYSDATE, #{userId}, SYSDATE
		)
	</insert>
	
	<!-- 게시판 상세보기 쿼리 -->
	<select id="getNoticeInfo" resultType="NoticeDTO">
		SELECT N.NOTICE_SEQ, N.TITLE, N.NOTICE_YN, N.READ_CNT, U.USER_NAME, N.USER_ID,
			   CONTENTS, TO_CHAR(N.REG_DT, 'YYYY-MM-DD') AS REG_DT
	      FROM NOTICE N, USER_INFO U
	     WHERE N.USER_ID = U.USER_ID 
	       AND N.NOTICE_SEQ = #{noticeSeq}
	</select>
	
	<!-- 조회수 증가 쿼리 -->
	<update id="updateNoticeReadCnt" parameterType="NoticeDTO">
		UPDATE NOTICE SET
			READ_CNT = READ_CNT + 1
		WHERE
			NOTICE_SEQ = #{noticeSeq}
	</update>

	<!-- 게시판 수정 쿼리 -->
	<update id="updateNoticeInfo" parameterType="NoticeDTO">
		UPDATE NOTICE SET
			TITLE = #{title},
			NOTICE_YN = #{noticeYn},
			CONTENTS = #{contents},
			CHG_ID = #{userId},
			CHG_DT = SYSDATE
		WHERE
			NOTICE_SEQ = #{noticeSeq}
			
	</update>

	<!-- 게시판 삭제 쿼리 -->
	<delete id="deleteNoticeInfo" parameterType="NoticeDTO">
		DELETE FROM NOTICE
		WHERE NOTICE_SEQ = #{noticeSeq}

	</delete>
			
</mapper>